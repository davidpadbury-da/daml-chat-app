{"version":3,"sources":["utils.js","ChatManager.js","components/RoomList.js","components/CodeBlock.js","components/ChatSession.js","components/RoomUsers.js","App.js","serviceWorker.js","index.js"],"names":["onChange","fn","priorValue","value","JSON","stringify","ChatManager","party","token","stateUpdate","headers","Authorization","chatRoomTemplate","moduleName","entityName","post","url","options","Object","assign","method","fetch","sortMessages","messages","sort","m1","m2","timestamp","toModel","items","contractId","argument","id","owner","channelName","members","map","_1","_2","_3","sender","Date","text","fetchUpdate","a","body","response","json","chatRooms","result","flatMap","r","activeContracts","r1","r2","console","error","setTimeout","sendMessage","room","message","templateId","choice","winner","createRoom","name","getTime","inviteUser","user","newMember","RoomList","props","rooms","currentRoom","switchToRoom","roomList","currentUser","isRoomActive","className","key","onClick","CodeBlock","this","language","style","coy","PureComponent","defaultProps","ChatSession","time","format","source","renderers","code","RoomUsers","roomUsers","users","queryString","parse","window","location","search","Alice","Bob","App","state","userId","showLogin","isLoading","roomName","newMessage","chatManager","log","newRoom","filter","setState","updateCurrentRoomState","handleInput","bind","messageKeyDown","scrollToLatestMessages","animateScroll","scrollToBottom","containerId","event","preventDefault","trim","match","exec","command","content","encodeURIComponent","then","res","imageUrl","data","fixed_height_downsampled_url","target","keyCode","ctrlKey","autoComplete","onSubmit","minRows","maxRows","placeholder","onKeyDown","resize","Component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79ef9d67.chunk.js","sourcesContent":["export const onChange = fn => {\n  let priorValue\n\n  return value => {\n    // equality is hard, so just serialize everything instead 🙈\n    if (JSON.stringify(priorValue) !== JSON.stringify(value)) {\n      priorValue = value\n      fn(value)\n    }\n  }\n}","export default function ChatManager(party, token, stateUpdate) {\n  const headers = {\n    Authorization: `Bearer ${token}`\n  }\n  const chatRoomTemplate = { moduleName: 'Chat', entityName: 'ChatRoom' }\n\n  const get = url => fetch(url, { headers })\n  const post = (url, options = {}) => {\n    Object.assign(options, { method: 'POST', headers })\n    return fetch(url, options)\n  }\n\n  const sortMessages = (messages) => {\n    messages.sort((m1, m2) => m1.timestamp > m2.timestamp ? 1 : m1.timestamp < m2.timestamp ? -1 : 0)\n    return messages\n  }\n\n  const sort = (items) => {\n    items.sort()\n    return items\n  }\n\n  const toModel = ({ contractId, argument: { id, owner, channelName, members, messages }}) => ({\n    id, contractId, owner, channelName, \n    members: sort(members),\n    messages: sortMessages(messages.map(({_1, _2, _3}) => ({\n      sender: _1,\n      timestamp: new Date(_2),\n      text: _3\n    })))\n  })\n\n  const scheduleNextUpdate = () => setTimeout(fetchUpdate, 500)\n\n  const fetchUpdate = async () => {\n    try {\n      const response = await post('/contracts/search', { \n        body: JSON.stringify({ '%templates': [ chatRoomTemplate ]})\n      })\n\n      const body = await response.json()\n\n      const chatRooms = body.result\n        .flatMap(r => r.activeContracts)\n        .map(toModel)\n      \n      chatRooms.sort((r1, r2) => r1.channelName > r2.channelName ? 1 : r1.channelName < r2.channelName ? -1 : 0)\n      stateUpdate(chatRooms)\n    } catch (e) {\n      console.error(\"Fetching next contracts failed\", e)\n    } finally {\n      scheduleNextUpdate()\n    }\n  }\n\n  const sendMessage = async (room, message) => {\n    await post('/command/exercise', {\n      body: JSON.stringify({\n        templateId: chatRoomTemplate,\n        contractId: room.contractId,\n        choice: 'Add',\n        argument: {\n          winner: party,\n          message: message\n        }\n      })\n    })\n  }\n\n  const createRoom = async (name) => {\n    await post('/command/create', {\n      body: JSON.stringify({\n        templateId: chatRoomTemplate,\n        argument: {\n          id: `${party}_${new Date().getTime()}`,\n          owner: party,\n          channelName: name,\n          members: [ party ],\n          messages: []\n        }\n      })\n    })\n  }\n\n  const inviteUser = async (room, user) => {\n    await post('/command/exercise', {\n      body: JSON.stringify({\n        templateId: chatRoomTemplate,\n        contractId: room.contractId,\n        choice: 'Invite',\n        argument: {\n          newMember: user\n        }\n      })\n    })\n  }\n\n  // kick off initial update\n  fetchUpdate()\n\n  return {\n    sendMessage,\n    createRoom,\n    inviteUser\n  }\n} ","import React from 'react';\nimport Proptypes from 'prop-types';\n\nconst RoomList = props => {\n  const { rooms, currentRoom, switchToRoom, currentUser } = props;\n  const roomList = rooms.map(room => {\n    const roomIcon = '🌐';\n    const isRoomActive = currentRoom && room.id === currentRoom.id ? 'active' : '';\n\n    return (\n      <li\n        className={isRoomActive}\n        key={room.id}\n        onClick={() => switchToRoom(room.id)}\n      >\n        <span className=\"room-icon\">{roomIcon}</span>\n        <span className=\"room-name\">{room.channelName}</span>\n      </li>\n    );\n  });\n  return (\n    <div className=\"rooms\">\n      <ul className=\"chat-rooms\">{roomList}</ul>\n    </div>\n  );\n};\n\nRoomList.propTypes = {\n  rooms: Proptypes.array.isRequired,\n  currentRoom: Proptypes.object,\n  switchToRoom: Proptypes.func.isRequired,\n  currentUser: Proptypes.string.isRequired,\n};\n\nexport default RoomList;","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { coy } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\nclass CodeBlock extends PureComponent {\n  static propTypes = {\n    value: PropTypes.string,\n    language: PropTypes.string\n  };\n\n  static defaultProps = {\n    language: null\n  };\n\n  render() {\n    const { language, value } = this.props;\n    return (\n      <SyntaxHighlighter language={language === 'daml' ? 'haskell' : language} style={coy}>\n        {value || ''}\n      </SyntaxHighlighter>\n    );\n  }\n}\n\nexport default CodeBlock;","// client/src/components/ChatSession.js\n\nimport React, { useEffect } from 'react';\nimport Proptypes from 'prop-types';\nimport { format } from 'date-fns';\nimport ReactMarkdown from 'react-markdown'\nimport CodeBlock from './CodeBlock'\n\nconst ChatSession = props => {\n  const { messages } = props;\n\n  return messages.map(message => {\n    const time = format(new Date(`${message.timestamp}`), 'HH:mm');\n\n    return (\n      <li className=\"message\" key={message.timestamp.getTime()}>\n        <div>\n          <span className=\"user-id\">{message.sender}</span>\n          <span>\n            <ReactMarkdown\n              source={message.text}\n              renderers={{ code: CodeBlock }}\n              />\n          </span>\n        </div>\n        <span className=\"message-time\">{time}</span>\n      </li>\n    );\n  });\n};\n\nChatSession.propTypes = {\n  messages: Proptypes.arrayOf(Proptypes.object).isRequired,\n};\n\nexport default ChatSession;","import React from 'react';\nimport Proptypes from 'prop-types';\n\nconst RoomUsers = props => {\n  const { roomUsers, currentUser } = props;\n  const users = roomUsers.map(user => {\n    return (\n      <li className=\"room-member\" key={user}>\n        <div>\n          <span className={`presence online`} />\n          <span>{user}</span>\n        </div>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"room-users\">\n      <ul>{users}</ul>\n    </div>\n  );\n};\n\nRoomUsers.propTypes = {\n  roomUsers: Proptypes.array.isRequired,\n  currentUser: Proptypes.string.isRequired,\n};\n\nexport default RoomUsers;","import React, { Component } from 'react'\nimport { onChange } from './utils'\nimport ChatManager from './ChatManager'\nimport RoomList from './components/RoomList';\nimport ChatSession from './components/ChatSession';\nimport RoomUsers from './components/RoomUsers'\nimport { animateScroll } from 'react-scroll'\nimport queryString from 'query-string'\nimport Textarea from 'react-textarea-autosize'\n\nimport 'skeleton-css/css/normalize.css'\nimport 'skeleton-css/css/skeleton.css'\nimport './App.css';\n\nconst party = queryString.parse(window.location.search).party || 'Alice'\nconst partyTokens = {\n  Alice: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsZWRnZXJJZCI6ImNoYXRyb29tIiwiYXBwbGljYXRpb25JZCI6ImZvb2JhciIsInBhcnR5IjoiQWxpY2UifQ.LAYk7tX6OfcyZh5aOPrxlnVwRZ3iqtED3wadpunO45o',\n  Bob: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsZWRnZXJJZCI6ImNoYXRyb29tIiwiYXBwbGljYXRpb25JZCI6ImZvb2JhciIsInBhcnR5IjoiQm9iIn0.HEdbEnyeApZboQmdrPGJ0-tyqeuLV-XiqpJvcc7qHAw'\n}\nconst token = partyTokens[party]\nconst GIPHY_TOKEN = 'kDqbzOZtPvy38TLdqonPnpTPrsLfW8uy'\nlet priorRooms\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userId: '',\n      showLogin: true,\n      isLoading: false,\n      currentUser: party,\n      currentRoom: null,\n      rooms: [],\n      roomUsers: [],\n      roomName: null,\n      messages: [],\n      newMessage: '',\n    };\n\n    this.chatManager = new ChatManager(party, token, onChange(rooms => {\n      console.log(rooms)\n      const { currentRoom } = this.state\n\n      const newRoom = currentRoom && rooms.filter(r => r.id === currentRoom.id)[0] || rooms[0]\n\n      this.setState({\n        userId: party,\n        currentUser: party,\n        rooms: rooms,\n        ...this.updateCurrentRoomState(newRoom)\n      })\n    }))\n\n    this.handleInput = this.handleInput.bind(this)\n    this.sendMessage = this.sendMessage.bind(this)\n    this.updateCurrentRoomState = this.updateCurrentRoomState.bind(this)\n    this.messageKeyDown = this.messageKeyDown.bind(this)\n  }\n\n  componentDidMount() {\n    this.scrollToLatestMessages()\n  }\n\n  componentDidUpdate() {\n    this.scrollToLatestMessages()\n  }\n\n  scrollToLatestMessages() {\n    animateScroll.scrollToBottom({\n      containerId: 'chat-messages'\n    })\n  }\n\n  updateCurrentRoomState(room) {\n    return {\n      roomName: room && room.channelName,\n      currentRoom: room,\n      roomUsers: room && room.members,\n      messages: (room && room.messages) || []\n    }\n  }\n\n  sendMessage(event) {\n    event.preventDefault()\n    const { newMessage, currentUser, currentRoom } = this.state\n\n    if (newMessage.trim() === '') return\n\n    const match = /\\/(\\w+) (.*)/.exec(newMessage)\n    const command = match ? match[1] : 'send'\n    const content = match ? match[2] : newMessage\n\n    switch (command) {\n      case 'send':\n        this.chatManager.sendMessage(currentRoom, content)\n        break;\n\n      case 'create':\n        this.chatManager.createRoom(content)\n        break;\n\n      case 'invite':\n        this.chatManager.inviteUser(currentRoom, content)\n        break;\n\n      case 'giphy':\n        fetch(`//api.giphy.com/v1/gifs/random?api_key=${GIPHY_TOKEN}&tag=${encodeURIComponent(content)}`)\n          .then(async res => {\n            const result = await res.json()\n            const imageUrl = result.data.fixed_height_downsampled_url\n            const message = `![${content}](${imageUrl})`\n            this.chatManager.sendMessage(currentRoom, message)\n          })\n          break;\n\n      default:\n        console.log(\"Unknown command\", command)\n    }\n\n    this.setState({ newMessage: '' })\n  }\n\n  handleInput(event) {\n    const { name, value } = event.target\n\n    this.setState({\n      [name]: value\n    })\n  }\n\n  messageKeyDown(event) {\n    if (event.keyCode !== 13) return\n\n    event.preventDefault()\n\n    if (event.ctrlKey) {\n      // insert newline\n      const { newMessage } = this.state\n      this.setState({\n        newMessage: newMessage + '\\n'\n      })\n    } else {\n      this.sendMessage(event)\n    }\n  }\n\n  switchToRoom(id) {\n    const { rooms } = this.state\n    const newRoom = rooms.filter(r => r.id == id)[0]\n\n    this.setState(this.updateCurrentRoomState(newRoom))\n  }\n\n  render() {\n    const {\n      userId,\n      showLogin,\n      rooms,\n      currentRoom,\n      currentUser,\n      messages,\n      newMessage,\n      roomUsers,\n      roomName,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <aside className=\"sidebar left-sidebar\">\n        {currentUser ? (\n            <div className=\"user-profile\">\n              <span className=\"username\">{`@${currentUser}`}</span>\n            </div>\n          ) : null}\n          {rooms ? (\n            <RoomList\n              rooms={rooms}\n              currentRoom={currentRoom}\n              switchToRoom={this.switchToRoom.bind(this)}\n              currentUser={currentUser}\n            />\n          ) : null}\n        </aside>\n        <section className=\"chat-screen\">\n          <header className=\"chat-header\">\n              {currentRoom ? <h3>{currentRoom.channelName}</h3> : null}\n          </header>\n          <ul className=\"chat-messages\" id=\"chat-messages\">\n            <ChatSession messages={messages} />\n          </ul>\n          <footer className=\"chat-footer\">\n            <fieldset>\n              <form className=\"message-form\" autoComplete=\"off\" onSubmit={this.sendMessage}>\n                <Textarea\n                  minRows={1}\n                  maxRows={3}\n                  value={newMessage}\n                  name=\"newMessage\"\n                  className=\"message-input\"\n                  placeholder=\"Type your message and hit ENTER to send\"\n                  onChange={this.handleInput}\n                  onKeyDown={this.messageKeyDown}\n                  resize=\"none\"\n                />\n              </form>\n            </fieldset>\n          </footer>\n        </section>\n        <aside className=\"sidebar right-sidebar\">\n            {currentRoom ? (\n              <RoomUsers\n                currentUser={currentUser}\n                roomUsers={roomUsers}\n              />\n            ) : null}\n        </aside>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}